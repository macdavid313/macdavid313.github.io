<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>julia on gty</title><link>https://macdavid313.xyz/tags/julia/</link><description>Recent content in julia on gty</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://macdavid313.xyz/tags/julia/index.xml" rel="self" type="application/rss+xml"/><item><title>Embedding Julia in Lisp</title><link>https://macdavid313.xyz/posts/embedding-julia-lisp/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>https://macdavid313.xyz/posts/embedding-julia-lisp/</guid><description>Julia is a high-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science while also being effective for general-purpose programming, web use or as a specification language1. I like its Lisp-like macros and multiple dispatch strategy. After all, itâ€™s from MIT, where LISP happens. Its performance, according to this paper, is often within a factor of two relative to fully optimized C code (and thus often an order of magnitude faster than Python or R)2.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>compiler on gty</title><link>https://macdavid313.xyz/tags/compiler/</link><description>Recent content in compiler on gty</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://macdavid313.xyz/tags/compiler/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Lisp Solution to While Language</title><link>https://macdavid313.xyz/posts/lisp-while-lang/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><guid>https://macdavid313.xyz/posts/lisp-while-lang/</guid><description>I have written a solution to Hackerrank&amp;#39;s problem &amp;#34;While Language&amp;#34; in Common Lisp, solely for fun. Several years ago, I have solved it using OCaml.
Where does &amp;#39;fun&amp;#39; come from? In Lisp, it&amp;#39;s really easy to construct ASTs. In a lot of scenarios, you can effortlessly transpile source code into Lisp forms and then ask your Lisp implementation to analyse, optimise and execute it. For example, after lexing and parsing, I have written a function gen-lisp-code to expose the transpiled Lisp code:</description></item></channel></rss>